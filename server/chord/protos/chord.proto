syntax = "proto3";

package chord;
option go_package="./chord";

// Chord service for inter-node communication.
service Chord {
  // GetPredecessor returns the node believed to be the current predecessor.
  rpc GetPredecessor(EmptyRequest) returns (Node);
  // GetSuccessor returns the node believed to be the current successor.
  rpc GetSuccessor(EmptyRequest) returns (Node);
  // FindSuccessor finds the node that succeeds ID.
  rpc FindSuccessor(ID) returns (Node);
  // SetPredecessor sets the predecessor of this node.
  rpc SetPredecessor(Node) returns (EmptyRequest);
  // SetSuccessor sets the successor of this node.
  rpc SetSuccessor(Node) returns (EmptyRequest);
  // Notify this node that it possibly have a new predecessor.
  rpc Notify(Node) returns (EmptyRequest);
  // Check if this Node is alive.
  rpc Check(EmptyRequest) returns (EmptyRequest);
}

// Empty request for null parameters and returns.
message EmptyRequest {}

// Identifier of a node.
message ID{
  bytes ID = 1;
}

// Node contains a node ID and an address.
message Node {
  bytes id = 1;
  string addr = 2;
}