// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: proto/history.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HistoryServiceClient is the client API for HistoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HistoryServiceClient interface {
	AddHistoryEntry(ctx context.Context, in *AddHistoryEntryRequest, opts ...grpc.CallOption) (*AddHistoryEntryResponse, error)
	GetFullHistory(ctx context.Context, in *GetFullHistoryRequest, opts ...grpc.CallOption) (HistoryService_GetFullHistoryClient, error)
	GetHistoryFromOffset(ctx context.Context, in *GetHistoryFromOffsetRequest, opts ...grpc.CallOption) (HistoryService_GetHistoryFromOffsetClient, error)
}

type historyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHistoryServiceClient(cc grpc.ClientConnInterface) HistoryServiceClient {
	return &historyServiceClient{cc}
}

func (c *historyServiceClient) AddHistoryEntry(ctx context.Context, in *AddHistoryEntryRequest, opts ...grpc.CallOption) (*AddHistoryEntryResponse, error) {
	out := new(AddHistoryEntryResponse)
	err := c.cc.Invoke(ctx, "/distributed_agenda.HistoryService/AddHistoryEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *historyServiceClient) GetFullHistory(ctx context.Context, in *GetFullHistoryRequest, opts ...grpc.CallOption) (HistoryService_GetFullHistoryClient, error) {
	stream, err := c.cc.NewStream(ctx, &HistoryService_ServiceDesc.Streams[0], "/distributed_agenda.HistoryService/GetFullHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &historyServiceGetFullHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoryService_GetFullHistoryClient interface {
	Recv() (*GetFullHistoryResponse, error)
	grpc.ClientStream
}

type historyServiceGetFullHistoryClient struct {
	grpc.ClientStream
}

func (x *historyServiceGetFullHistoryClient) Recv() (*GetFullHistoryResponse, error) {
	m := new(GetFullHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *historyServiceClient) GetHistoryFromOffset(ctx context.Context, in *GetHistoryFromOffsetRequest, opts ...grpc.CallOption) (HistoryService_GetHistoryFromOffsetClient, error) {
	stream, err := c.cc.NewStream(ctx, &HistoryService_ServiceDesc.Streams[1], "/distributed_agenda.HistoryService/GetHistoryFromOffset", opts...)
	if err != nil {
		return nil, err
	}
	x := &historyServiceGetHistoryFromOffsetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HistoryService_GetHistoryFromOffsetClient interface {
	Recv() (*GetHistoryFromOffsetResponse, error)
	grpc.ClientStream
}

type historyServiceGetHistoryFromOffsetClient struct {
	grpc.ClientStream
}

func (x *historyServiceGetHistoryFromOffsetClient) Recv() (*GetHistoryFromOffsetResponse, error) {
	m := new(GetHistoryFromOffsetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HistoryServiceServer is the server API for HistoryService service.
// All implementations must embed UnimplementedHistoryServiceServer
// for forward compatibility
type HistoryServiceServer interface {
	AddHistoryEntry(context.Context, *AddHistoryEntryRequest) (*AddHistoryEntryResponse, error)
	GetFullHistory(*GetFullHistoryRequest, HistoryService_GetFullHistoryServer) error
	GetHistoryFromOffset(*GetHistoryFromOffsetRequest, HistoryService_GetHistoryFromOffsetServer) error
	mustEmbedUnimplementedHistoryServiceServer()
}

// UnimplementedHistoryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHistoryServiceServer struct {
}

func (UnimplementedHistoryServiceServer) AddHistoryEntry(context.Context, *AddHistoryEntryRequest) (*AddHistoryEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddHistoryEntry not implemented")
}
func (UnimplementedHistoryServiceServer) GetFullHistory(*GetFullHistoryRequest, HistoryService_GetFullHistoryServer) error {
	return status.Errorf(codes.Unimplemented, "method GetFullHistory not implemented")
}
func (UnimplementedHistoryServiceServer) GetHistoryFromOffset(*GetHistoryFromOffsetRequest, HistoryService_GetHistoryFromOffsetServer) error {
	return status.Errorf(codes.Unimplemented, "method GetHistoryFromOffset not implemented")
}
func (UnimplementedHistoryServiceServer) mustEmbedUnimplementedHistoryServiceServer() {}

// UnsafeHistoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HistoryServiceServer will
// result in compilation errors.
type UnsafeHistoryServiceServer interface {
	mustEmbedUnimplementedHistoryServiceServer()
}

func RegisterHistoryServiceServer(s grpc.ServiceRegistrar, srv HistoryServiceServer) {
	s.RegisterService(&HistoryService_ServiceDesc, srv)
}

func _HistoryService_AddHistoryEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHistoryEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HistoryServiceServer).AddHistoryEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributed_agenda.HistoryService/AddHistoryEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HistoryServiceServer).AddHistoryEntry(ctx, req.(*AddHistoryEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HistoryService_GetFullHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetFullHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoryServiceServer).GetFullHistory(m, &historyServiceGetFullHistoryServer{stream})
}

type HistoryService_GetFullHistoryServer interface {
	Send(*GetFullHistoryResponse) error
	grpc.ServerStream
}

type historyServiceGetFullHistoryServer struct {
	grpc.ServerStream
}

func (x *historyServiceGetFullHistoryServer) Send(m *GetFullHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _HistoryService_GetHistoryFromOffset_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetHistoryFromOffsetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HistoryServiceServer).GetHistoryFromOffset(m, &historyServiceGetHistoryFromOffsetServer{stream})
}

type HistoryService_GetHistoryFromOffsetServer interface {
	Send(*GetHistoryFromOffsetResponse) error
	grpc.ServerStream
}

type historyServiceGetHistoryFromOffsetServer struct {
	grpc.ServerStream
}

func (x *historyServiceGetHistoryFromOffsetServer) Send(m *GetHistoryFromOffsetResponse) error {
	return x.ServerStream.SendMsg(m)
}

// HistoryService_ServiceDesc is the grpc.ServiceDesc for HistoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HistoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributed_agenda.HistoryService",
	HandlerType: (*HistoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddHistoryEntry",
			Handler:    _HistoryService_AddHistoryEntry_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetFullHistory",
			Handler:       _HistoryService_GetFullHistory_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetHistoryFromOffset",
			Handler:       _HistoryService_GetHistoryFromOffset_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/history.proto",
}
