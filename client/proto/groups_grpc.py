# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/groups.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import proto.users_pb2
import proto.groups_pb2


class GroupServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetGroup(self, stream: 'grpclib.server.Stream[proto.groups_pb2.GetGroupRequest, proto.groups_pb2.GetGroupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateGroup(self, stream: 'grpclib.server.Stream[proto.groups_pb2.CreateGroupRequest, proto.groups_pb2.CreateGroupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def EditGroup(self, stream: 'grpclib.server.Stream[proto.groups_pb2.EditGroupRequest, proto.groups_pb2.EditGroupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteGroup(self, stream: 'grpclib.server.Stream[proto.groups_pb2.DeleteGroupRequest, proto.groups_pb2.DeleteGroupResponse]') -> None:
        pass

    @abc.abstractmethod
    async def GetGroupUsers(self, stream: 'grpclib.server.Stream[proto.groups_pb2.GetGroupUsersRequest, proto.groups_pb2.GetGroupUsersResponse]') -> None:
        pass

    @abc.abstractmethod
    async def AddUser(self, stream: 'grpclib.server.Stream[proto.groups_pb2.AddUserRequest, proto.groups_pb2.AddUserResponse]') -> None:
        pass

    @abc.abstractmethod
    async def RemoveUser(self, stream: 'grpclib.server.Stream[proto.groups_pb2.RemoveUserRequest, proto.groups_pb2.RemoveUserResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/distributed_agenda.GroupService/GetGroup': grpclib.const.Handler(
                self.GetGroup,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.GetGroupRequest,
                proto.groups_pb2.GetGroupResponse,
            ),
            '/distributed_agenda.GroupService/CreateGroup': grpclib.const.Handler(
                self.CreateGroup,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.CreateGroupRequest,
                proto.groups_pb2.CreateGroupResponse,
            ),
            '/distributed_agenda.GroupService/EditGroup': grpclib.const.Handler(
                self.EditGroup,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.EditGroupRequest,
                proto.groups_pb2.EditGroupResponse,
            ),
            '/distributed_agenda.GroupService/DeleteGroup': grpclib.const.Handler(
                self.DeleteGroup,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.DeleteGroupRequest,
                proto.groups_pb2.DeleteGroupResponse,
            ),
            '/distributed_agenda.GroupService/GetGroupUsers': grpclib.const.Handler(
                self.GetGroupUsers,
                grpclib.const.Cardinality.UNARY_STREAM,
                proto.groups_pb2.GetGroupUsersRequest,
                proto.groups_pb2.GetGroupUsersResponse,
            ),
            '/distributed_agenda.GroupService/AddUser': grpclib.const.Handler(
                self.AddUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.AddUserRequest,
                proto.groups_pb2.AddUserResponse,
            ),
            '/distributed_agenda.GroupService/RemoveUser': grpclib.const.Handler(
                self.RemoveUser,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.groups_pb2.RemoveUserRequest,
                proto.groups_pb2.RemoveUserResponse,
            ),
        }


class GroupServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetGroup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/GetGroup',
            proto.groups_pb2.GetGroupRequest,
            proto.groups_pb2.GetGroupResponse,
        )
        self.CreateGroup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/CreateGroup',
            proto.groups_pb2.CreateGroupRequest,
            proto.groups_pb2.CreateGroupResponse,
        )
        self.EditGroup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/EditGroup',
            proto.groups_pb2.EditGroupRequest,
            proto.groups_pb2.EditGroupResponse,
        )
        self.DeleteGroup = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/DeleteGroup',
            proto.groups_pb2.DeleteGroupRequest,
            proto.groups_pb2.DeleteGroupResponse,
        )
        self.GetGroupUsers = grpclib.client.UnaryStreamMethod(
            channel,
            '/distributed_agenda.GroupService/GetGroupUsers',
            proto.groups_pb2.GetGroupUsersRequest,
            proto.groups_pb2.GetGroupUsersResponse,
        )
        self.AddUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/AddUser',
            proto.groups_pb2.AddUserRequest,
            proto.groups_pb2.AddUserResponse,
        )
        self.RemoveUser = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.GroupService/RemoveUser',
            proto.groups_pb2.RemoveUserRequest,
            proto.groups_pb2.RemoveUserResponse,
        )
