# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: proto/events.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.timestamp_pb2
import proto.events_pb2


class EventsServiceBase(abc.ABC):

    @abc.abstractmethod
    async def GetEvent(self, stream: 'grpclib.server.Stream[proto.events_pb2.GetEventRequest, proto.events_pb2.GetEventResponse]') -> None:
        pass

    @abc.abstractmethod
    async def CreateEvent(self, stream: 'grpclib.server.Stream[proto.events_pb2.CreateEventRequest, proto.events_pb2.CreateEventResponse]') -> None:
        pass

    @abc.abstractmethod
    async def DeleteEvent(self, stream: 'grpclib.server.Stream[proto.events_pb2.DeleteEventRequest, proto.events_pb2.DeleteEventResponse]') -> None:
        pass

    @abc.abstractmethod
    async def ConfirmEvent(self, stream: 'grpclib.server.Stream[proto.events_pb2.ConfirmEventRequest, proto.events_pb2.ConfirmEventResponse]') -> None:
        pass

    @abc.abstractmethod
    async def RejectEvent(self, stream: 'grpclib.server.Stream[proto.events_pb2.RejectEventRequest, proto.events_pb2.RejectEventResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/distributed_agenda.EventsService/GetEvent': grpclib.const.Handler(
                self.GetEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.events_pb2.GetEventRequest,
                proto.events_pb2.GetEventResponse,
            ),
            '/distributed_agenda.EventsService/CreateEvent': grpclib.const.Handler(
                self.CreateEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.events_pb2.CreateEventRequest,
                proto.events_pb2.CreateEventResponse,
            ),
            '/distributed_agenda.EventsService/DeleteEvent': grpclib.const.Handler(
                self.DeleteEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.events_pb2.DeleteEventRequest,
                proto.events_pb2.DeleteEventResponse,
            ),
            '/distributed_agenda.EventsService/ConfirmEvent': grpclib.const.Handler(
                self.ConfirmEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.events_pb2.ConfirmEventRequest,
                proto.events_pb2.ConfirmEventResponse,
            ),
            '/distributed_agenda.EventsService/RejectEvent': grpclib.const.Handler(
                self.RejectEvent,
                grpclib.const.Cardinality.UNARY_UNARY,
                proto.events_pb2.RejectEventRequest,
                proto.events_pb2.RejectEventResponse,
            ),
        }


class EventsServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.GetEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.EventsService/GetEvent',
            proto.events_pb2.GetEventRequest,
            proto.events_pb2.GetEventResponse,
        )
        self.CreateEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.EventsService/CreateEvent',
            proto.events_pb2.CreateEventRequest,
            proto.events_pb2.CreateEventResponse,
        )
        self.DeleteEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.EventsService/DeleteEvent',
            proto.events_pb2.DeleteEventRequest,
            proto.events_pb2.DeleteEventResponse,
        )
        self.ConfirmEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.EventsService/ConfirmEvent',
            proto.events_pb2.ConfirmEventRequest,
            proto.events_pb2.ConfirmEventResponse,
        )
        self.RejectEvent = grpclib.client.UnaryUnaryMethod(
            channel,
            '/distributed_agenda.EventsService/RejectEvent',
            proto.events_pb2.RejectEventRequest,
            proto.events_pb2.RejectEventResponse,
        )
